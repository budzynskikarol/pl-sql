1) Utworzyć kopię tabeli pracownicy Pracownicy_Nazwisko. W procedurze usunąć z tabeli Pracownicy_Nazwisko rekordy dla których wartość w polu kraj jest zgodna z wartością parametru procedury. 10Pkt.

set serveroutput on; 
create table Pracownicy_Nazwisko_KB
as
select * from EB.PRACOWNICY;

create or replace procedure kolok_1 (kraj in PS1N_BZ.Pracownicy_Nazwisko_KB.kraj%type) 
as
begin
delete from PS1N_BZ.Pracownicy_Nazwisko_KB p
where p.kraj = kraj;
DBMS_OUTPUT.PUT_LINE('Skasowano pracownika mieszkajacego w: '||kraj);
end;

select * from Pracownicy_Nazwisko_KB;

execute kolok_1('Polska');

2) Napisać funkcję zwracającą identyfikator najdroższego samochodu z roku podanego w parametrze.Podać przykładowe wywołanie funkcji. 10Pkt.

create or replace function kolok_2 (rok in EB.samochody.rok_prod%type) 
return number
as
ID_sam EB.samochody.idsamochodu%type;
begin
select idsamochodu into ID_sam
from EB.samochody s
where s.rok_prod = rok
and s.cena = (select max(cena) from EB.samochody where EB.samochody.rok_prod = rok);
return ID_sam;
end;

SET SERVEROUTPUT ON
declare
ID_sam2 EB.samochody.idsamochodu%type;
rok2 EB.samochody.rok_prod%type := &wp;
begin
ID_sam2 := kolok_2(rok2);
DBMS_OUTPUT.PUT_LINE('Id najdroższego samochodu z roku: '||rok2||'  wynosi: '||ID_sam2);
end;

3) W pętli FOR dla kursora podać Nazwisko, Imię klientów z Łomży oraz numery umów. 10Pkt.

SET SERVEROUTPUT ON
declare cursor kolok_3 
is
select k.nazwisko na, k.imie im, o.idumowy idu from EB.klienci k, EB.umowy u, EB.opisyumow o
where k.idklienta=u.idklienta and u.idumowy=o.idumowy and k.miasto = ('Lomza');
begin
for ks in kolok_3
loop
DBMS_OUTPUT.PUT_LINE(kolok_3%rowcount||') '||ks.na||' '||ks.im||' '||ks.idu);
end loop;
end;

4) Napisać procedurę, która sprawdzi liczbę samochodów podanego jako parametr modelu. Odpowiednie informacje, tzn. nazwa modelu i liczba samochodów, powinny być przesłane do wcześniej utworzonej tabeli kol1.

create table kol1
(Liczba_sam number(5),
Model_sam varchar2(20))

create or replace procedure kolok_4 (p_model4 in varchar2) 
as
ile_sam4 number(5);
begin
select count(1) into ile_sam4
from EB.samochody sa, EB.modele mo
where sa.idmodelu = mo.idmodelu
and mo.nazwa = p_model4;
DBMS_OUTPUT.PUT_LINE('Model: '||p_model4||' ilosc sztuk: '||ile_sam4);
insert into PS1N_BZ.kol1 values (ile_sam4, p_model4);
end;

5) Utworzyć kopie tabel: Klienci i Umowy. Napisać wyzwalacz, który będzie aktywowany po wykonaniu polecenia modyfikacji pola IdKlienta w kopii tabeli Klienci. Wyzwalacz powinien zmodyfikować dane w kopii tabeli Umowy. 

create table klienci_kolok5
as select * from EB.klienci;

create table umowy_kolok5
as select * from EB.umowy;

set serveroutput on; 
CREATE OR REPLACE TRIGGER kolok_5
AFTER UPDATE OF idklienta ON klienci_kolok5
FOR EACH ROW
BEGIN
UPDATE umowy_kolok5
set idklienta = :new.idklienta
where idklienta = :old.idklienta;
END;

set serveroutput on;
update klienci_kolok5
set idklienta = 666
where idklienta = 12;

6) Napisać anonimowy blok PL/SQL podający liczbę pracowników na stanowisku doradca. 
Jeśli liczba jest większa od 2 wypisać liczbę pomniejszoną o 1%. Jeśli jest mniejsza od 2 powiększoną o 3%.

set serveroutput on
declare
liczba Number(5,2);
begin
select count(P.IdStanowiska) into liczba
from EB.Pracownicy P, EB.Stanowiska S
where P.IdStanowiska = S.IdStanowiska
and
S.Nazwa = 'doradca';
if (liczba > 2) then
dbms_output.put_line('Liczba pracownikow jest wieksza od 2, wynik: '||liczba*0.99);
else
dbms_output.put_line('Liczba pracownikow jest mniejsza od 2, wynik : '||liczba*1.03);
end if;
end; 

7) Utworzyć kopię tabeli Klienci. Użyć kursora SELECT FOR UPDATE do zmodyfikowania adresu klientów z „Dluga 2” na „Długa 2”.

SET SERVEROUTPUT ON
declare cursor c_adres
is
select * from kopia_klienci for update of adres;
begin
for ks in c_adres 
loop 
update kopia_klienci set adres = 'Długa 2'
where kopia_klienci.adres = 'Dluga 2';
end loop;
commit;
end;

8) Napisać anonimowy bloku PL/SQL podający na ekranie nazwę najdroższej marki i jej modelu samochodu. Nazwy wypisać dużymi literami. 

set serveroutput on
declare 
marka_sam EB.marki.nazwa%type;
model_sam EB.modele.nazwa%type;
cena EB.samochody.cena%type;
begin
select max(s.cena) into cena from EB.samochody s;
select mo.nazwa into model_sam from EB.samochody s, EB.modele mo
where s.idmodelu=mo.idmodelu and s.cena = (select max(cena) from EB.samochody);
select ma.nazwa into marka_sam from EB.samochody s, EB.modele mo, EB.marki ma
where s.idmodelu=mo.idmodelu and mo.idmarki=ma.idmarki
and s.cena = (select max(cena) from EB.samochody);
DBMS_OUTPUT.PUT_LINE('Najdroższy samochód to: ' ||UPPER(marka_sam) ||' '||UPPER(model_sam) ||' - kosztuje: ' || cena );
end;

9) Napisać procedurę, która sprawdzi który właściciel ma tylko jeden samochód. Procedura wyświetla nazwisko właściciela. Podać wywołanie procedury.

SET serveroutput ON;
CREATE OR REPLACE PROCEDURE Kolok_9
AS
V_nazw EB.WLASCICIELE.Nazwisko%TYPE;
BEGIN 
SELECT W.Nazwisko INTO V_nazw
FROM EB.Wlasciciele w, EB.samochody s
where w.idwlasciciela = s.idwlascicela
Group BY W.nazwisko, s.idsamochodu
having count(1) = 1;
dbms_output.put_line('Wlasciciel(e) ktorzy  mają jeden samochod:'||V_nazw);
END;

EXECUTE kolok_9;

10) Napisać funkcję, która zwróci liczbę umów realizowanych przez pracownika o podanym jako parametr nazwisku i imieniu. Podać wywołanie funkcji.

create or replace function Kolok_10 (nazw_prac in EB.pracownicy.nazwisko%type, imie_prac in EB.pracownicy.imie%type) 
return number
as
ile_umow number(5);
begin
select count(1) into ile_umow
from EB.pracownicy p, EB.umowy u
where p.idpracownika = u.idpracownika
and p.nazwisko = nazw_prac
and p.imie = imie_prac;
return ile_umow;
end;

SET SERVEROUTPUT ON
declare
ile_umow number(5);
begin
ile_umow := Kolok_10('Oczar','Marek');
DBMS_OUTPUT.PUT_LINE('Liczba realizowanych umów przez Oczar Marek: '||ile_umow);
end;

11) Napisać anonimowy bloku PL/SQL podający na ekranie nazwę najtańszej marki i jej modelu samochodu.

set serveroutput on
declare 
marka_sam EB.marki.nazwa%type;
model_sam EB.modele.nazwa%type;
cena EB.samochody.cena%type;
begin
select min(s.cena) into cena from EB.samochody s;
select mo.nazwa into model_sam from EB.samochody s, EB.modele mo
where s.idmodelu=mo.idmodelu and s.cena = (select min(cena) from EB.samochody);
select ma.nazwa into marka_sam from EB.samochody s, EB.modele mo, EB.marki ma
where s.idmodelu=mo.idmodelu and mo.idmarki=ma.idmarki
and s.cena = (select min(cena) from EB.samochody);
DBMS_OUTPUT.PUT_LINE('Najtańszy samochód to: ' ||marka_sam||' '||model_sam||' - kosztuje: ' || cena );
end;

12) W anonimowej pętli FOR kursora podać Nazwisko, Imie pracownika oraz numery umów podpisanych w 2014 roku.

Declare
BEGIN
dbms_output.put_line('Nazwisko | Imie | Numer');
FOR i in (
SELECT eb.pracownicy.nazwisko nazwisko, eb.pracownicy.imie imie, eb.umowy.idumowy idumowy
FROM eb.pracownicy, eb.umowy
WHERE eb.umowy.idpracownika=eb.pracownicy.idpracownika and EXTRACT(YEAR FROM eb.umowy.datapodpisania)='2014')
LOOP
dbms_output.put_line(i.nazwisko||' '||i.imie||' '||i.idumowy);
END LOOP;
END;

13) Utworzyć procedurę do wstawiania wartości do kopii tabeli Stanowiska. Utworzyć sekwencję generującą wartości od maksymalnej liczby rekordów +1 w kopii tabeli Stanowiska do 100 i wykorzystać do wstawiania wartości do pola IdStanowiska.

create table kopia_stanowiska as select * from eb.stanowiska; 

CREATE sequence sek_kol_13
minvalue 7
maxvalue 100
increment by 1;

CREATE OR REPLACE PROCEDURE dodaj_stanowisko(id_st IN kopia_stanowiska.idstanowiska%type, naz_st in kopia_stanowiska.nazwa%type)
IS
BEGIN
INSERT INTO kopia_stanowiska VALUES (id_st, naz_st);
END;

DECLARE
id_st kopia_stanowiska.idstanowiska%type := sek_kol_13.nextval;
naz_st kopia_stanowiska.nazwa%type := &nazwa;
BEGIN
dodaj_stanowisko(id_st,naz_st);
END;

14) Utworzyć kopię tabeli Marki - tabela Marki_Nazwisko. W procedurze zmienić nazwę marki w tabeli Marki_Nazwisko dla podanego w parametrze IdMarki.

create table marki_budzynski as select * from eb.marki; 

CREATE OR REPLACE PROCEDURE edycja_marki(id_mar IN marki_budzynski.idmarki%type, nazwa_mar IN marki_budzynski.nazwa%type)
IS
BEGIN
UPDATE marki_budzynski
set NAZWA = nazwa_mar
where IDMARKI = id_mar;
END;

execute edycja_marki(1, 'Citroen');

15) Napisać funkcję, która zwróci liczbę umów podpisanych przez klienta o podanym jako parametr nazwisku i imieniu. Podać wywołanie funkcji.

create or replace function Kolok_15 (nazw_kli in EB.klienci.nazwisko%type, imie_kli in EB.klienci.imie%type) 
return number
as
ile_umow number(5);
begin
select count(1) into ile_umow
from EB.klienci k, EB.umowy u
where k.idklienta = u.idklienta
and k.nazwisko = nazw_kli
and k.imie = imie_kli;
return ile_umow;
end;

SET SERVEROUTPUT ON
declare
ile_umow number(5);
begin
ile_umow := Kolok_15('Mukal','Andrzej');
DBMS_OUTPUT.PUT_LINE('Liczba umów podpisanych przez klienta Mukal Andrzej: '||ile_umow);
end;

16) Utworzyć kopie tabel Pracownicy i Stanowiska. Napisać wyzwalacz, który przed wstawieniem danych do kopii tabeli Pracownicy sprawdzi, czy podawany identyfikator występuje w kopii tabeli Stanowiska.

create table kopia_pracownicy
as select * from EB.pracownicy;

create table kopia_stanowiska
as select * from EB.stanowiska;

set serveroutput on; 
CREATE OR REPLACE TRIGGER tr_kolok_16
BEFORE INSERT ON kopia_pracownicy
FOR EACH ROW
DECLARE
v_l number(2);
BEGIN
select count(1) into v_l
from kopia_stanowiska
where idstanowiska = :new.idstanowiska;
if (v_l = 0) then
dbms_output.put_line('Brak id w tabeli stanowiska: '|| :new.idstanowiska);
raise_application_error(-20002, 'BLAD');
end if;
end;
